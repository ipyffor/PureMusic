// Generated by view binder compiler. Do not edit!
package com.caij.puremusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.fragment.app.FragmentContainerView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.caij.puremusic.R;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentGradientPlayerBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ConstraintLayout colorBackground;

  @NonNull
  public final LinearLayout container;

  @NonNull
  public final FragmentContainerView coverLyrics;

  @NonNull
  public final View mask;

  @NonNull
  public final MaterialTextView nextSong;

  @NonNull
  public final FragmentGradientControlsBinding playbackControlsFragment;

  @NonNull
  public final FragmentContainerView playerAlbumCoverFragment;

  @NonNull
  public final ConstraintLayout playerQueueSheet;

  @NonNull
  public final AppCompatImageView queueIcon;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final AppCompatImageButton repeatButton;

  @NonNull
  public final AppCompatImageButton shuffleButton;

  @NonNull
  public final StatusBarBinding statusBarLayout;

  private FragmentGradientPlayerBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ConstraintLayout colorBackground, @NonNull LinearLayout container,
      @NonNull FragmentContainerView coverLyrics, @NonNull View mask,
      @NonNull MaterialTextView nextSong,
      @NonNull FragmentGradientControlsBinding playbackControlsFragment,
      @NonNull FragmentContainerView playerAlbumCoverFragment,
      @NonNull ConstraintLayout playerQueueSheet, @NonNull AppCompatImageView queueIcon,
      @NonNull RecyclerView recyclerView, @NonNull AppCompatImageButton repeatButton,
      @NonNull AppCompatImageButton shuffleButton, @NonNull StatusBarBinding statusBarLayout) {
    this.rootView = rootView;
    this.colorBackground = colorBackground;
    this.container = container;
    this.coverLyrics = coverLyrics;
    this.mask = mask;
    this.nextSong = nextSong;
    this.playbackControlsFragment = playbackControlsFragment;
    this.playerAlbumCoverFragment = playerAlbumCoverFragment;
    this.playerQueueSheet = playerQueueSheet;
    this.queueIcon = queueIcon;
    this.recyclerView = recyclerView;
    this.repeatButton = repeatButton;
    this.shuffleButton = shuffleButton;
    this.statusBarLayout = statusBarLayout;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentGradientPlayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentGradientPlayerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_gradient_player, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentGradientPlayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.colorBackground;
      ConstraintLayout colorBackground = ViewBindings.findChildViewById(rootView, id);
      if (colorBackground == null) {
        break missingId;
      }

      id = R.id.container;
      LinearLayout container = ViewBindings.findChildViewById(rootView, id);
      if (container == null) {
        break missingId;
      }

      id = R.id.cover_lyrics;
      FragmentContainerView coverLyrics = ViewBindings.findChildViewById(rootView, id);
      if (coverLyrics == null) {
        break missingId;
      }

      id = R.id.mask;
      View mask = ViewBindings.findChildViewById(rootView, id);
      if (mask == null) {
        break missingId;
      }

      id = R.id.nextSong;
      MaterialTextView nextSong = ViewBindings.findChildViewById(rootView, id);
      if (nextSong == null) {
        break missingId;
      }

      id = R.id.playbackControlsFragment;
      View playbackControlsFragment = ViewBindings.findChildViewById(rootView, id);
      if (playbackControlsFragment == null) {
        break missingId;
      }
      FragmentGradientControlsBinding binding_playbackControlsFragment = FragmentGradientControlsBinding.bind(playbackControlsFragment);

      id = R.id.playerAlbumCoverFragment;
      FragmentContainerView playerAlbumCoverFragment = ViewBindings.findChildViewById(rootView, id);
      if (playerAlbumCoverFragment == null) {
        break missingId;
      }

      id = R.id.playerQueueSheet;
      ConstraintLayout playerQueueSheet = ViewBindings.findChildViewById(rootView, id);
      if (playerQueueSheet == null) {
        break missingId;
      }

      id = R.id.queueIcon;
      AppCompatImageView queueIcon = ViewBindings.findChildViewById(rootView, id);
      if (queueIcon == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.repeatButton;
      AppCompatImageButton repeatButton = ViewBindings.findChildViewById(rootView, id);
      if (repeatButton == null) {
        break missingId;
      }

      id = R.id.shuffleButton;
      AppCompatImageButton shuffleButton = ViewBindings.findChildViewById(rootView, id);
      if (shuffleButton == null) {
        break missingId;
      }

      id = R.id.status_bar_layout;
      View statusBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (statusBarLayout == null) {
        break missingId;
      }
      StatusBarBinding binding_statusBarLayout = StatusBarBinding.bind(statusBarLayout);

      return new FragmentGradientPlayerBinding((CoordinatorLayout) rootView, colorBackground,
          container, coverLyrics, mask, nextSong, binding_playbackControlsFragment,
          playerAlbumCoverFragment, playerQueueSheet, queueIcon, recyclerView, repeatButton,
          shuffleButton, binding_statusBarLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
