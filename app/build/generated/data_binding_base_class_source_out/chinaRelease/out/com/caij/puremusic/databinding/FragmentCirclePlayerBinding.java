// Generated by view binder compiler. Do not edit!
package com.caij.puremusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.caij.puremusic.R;
import com.caij.puremusic.views.RetroShapeableImageView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.slider.Slider;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.tankery.lib.circularseekbar.CircularSeekBar;

public final class FragmentCirclePlayerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RetroShapeableImageView albumCover;

  @NonNull
  public final RetroShapeableImageView albumCoverOverlay;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Guideline guideline;

  @NonNull
  public final IncludePlayerMenuBinding includePlayMenu;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final MaterialTextView materialTextView3;

  @NonNull
  public final ImageButton nextButton;

  @NonNull
  public final FloatingActionButton playPauseButton;

  @NonNull
  public final FrameLayout playerToolbar;

  @NonNull
  public final ImageButton previousButton;

  @NonNull
  public final Slider progressSlider;

  @NonNull
  public final MaterialTextView songCurrentProgress;

  @NonNull
  public final MaterialTextView songInfo;

  @NonNull
  public final MaterialTextView songTotalTime;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final FrameLayout statusBarContainer;

  @NonNull
  public final MaterialTextView text;

  @NonNull
  public final MaterialTextView title;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayout titleContainer;

  @NonNull
  public final CircularSeekBar volumeSeekBar;

  private FragmentCirclePlayerBinding(@NonNull ConstraintLayout rootView,
      @NonNull RetroShapeableImageView albumCover,
      @NonNull RetroShapeableImageView albumCoverOverlay, @Nullable Guideline guideline,
      @NonNull IncludePlayerMenuBinding includePlayMenu,
      @Nullable MaterialTextView materialTextView3, @NonNull ImageButton nextButton,
      @NonNull FloatingActionButton playPauseButton, @NonNull FrameLayout playerToolbar,
      @NonNull ImageButton previousButton, @NonNull Slider progressSlider,
      @NonNull MaterialTextView songCurrentProgress, @NonNull MaterialTextView songInfo,
      @NonNull MaterialTextView songTotalTime, @Nullable FrameLayout statusBarContainer,
      @NonNull MaterialTextView text, @NonNull MaterialTextView title,
      @Nullable LinearLayout titleContainer, @NonNull CircularSeekBar volumeSeekBar) {
    this.rootView = rootView;
    this.albumCover = albumCover;
    this.albumCoverOverlay = albumCoverOverlay;
    this.guideline = guideline;
    this.includePlayMenu = includePlayMenu;
    this.materialTextView3 = materialTextView3;
    this.nextButton = nextButton;
    this.playPauseButton = playPauseButton;
    this.playerToolbar = playerToolbar;
    this.previousButton = previousButton;
    this.progressSlider = progressSlider;
    this.songCurrentProgress = songCurrentProgress;
    this.songInfo = songInfo;
    this.songTotalTime = songTotalTime;
    this.statusBarContainer = statusBarContainer;
    this.text = text;
    this.title = title;
    this.titleContainer = titleContainer;
    this.volumeSeekBar = volumeSeekBar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCirclePlayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCirclePlayerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_circle_player, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCirclePlayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.album_cover;
      RetroShapeableImageView albumCover = ViewBindings.findChildViewById(rootView, id);
      if (albumCover == null) {
        break missingId;
      }

      id = R.id.album_cover_overlay;
      RetroShapeableImageView albumCoverOverlay = ViewBindings.findChildViewById(rootView, id);
      if (albumCoverOverlay == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);

      id = R.id.include_play_menu;
      View includePlayMenu = ViewBindings.findChildViewById(rootView, id);
      if (includePlayMenu == null) {
        break missingId;
      }
      IncludePlayerMenuBinding binding_includePlayMenu = IncludePlayerMenuBinding.bind(includePlayMenu);

      id = R.id.materialTextView3;
      MaterialTextView materialTextView3 = ViewBindings.findChildViewById(rootView, id);

      id = R.id.nextButton;
      ImageButton nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.playPauseButton;
      FloatingActionButton playPauseButton = ViewBindings.findChildViewById(rootView, id);
      if (playPauseButton == null) {
        break missingId;
      }

      id = R.id.playerToolbar;
      FrameLayout playerToolbar = ViewBindings.findChildViewById(rootView, id);
      if (playerToolbar == null) {
        break missingId;
      }

      id = R.id.previousButton;
      ImageButton previousButton = ViewBindings.findChildViewById(rootView, id);
      if (previousButton == null) {
        break missingId;
      }

      id = R.id.progressSlider;
      Slider progressSlider = ViewBindings.findChildViewById(rootView, id);
      if (progressSlider == null) {
        break missingId;
      }

      id = R.id.songCurrentProgress;
      MaterialTextView songCurrentProgress = ViewBindings.findChildViewById(rootView, id);
      if (songCurrentProgress == null) {
        break missingId;
      }

      id = R.id.songInfo;
      MaterialTextView songInfo = ViewBindings.findChildViewById(rootView, id);
      if (songInfo == null) {
        break missingId;
      }

      id = R.id.songTotalTime;
      MaterialTextView songTotalTime = ViewBindings.findChildViewById(rootView, id);
      if (songTotalTime == null) {
        break missingId;
      }

      id = R.id.statusBarContainer;
      FrameLayout statusBarContainer = ViewBindings.findChildViewById(rootView, id);

      id = R.id.text;
      MaterialTextView text = ViewBindings.findChildViewById(rootView, id);
      if (text == null) {
        break missingId;
      }

      id = R.id.title;
      MaterialTextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.titleContainer;
      LinearLayout titleContainer = ViewBindings.findChildViewById(rootView, id);

      id = R.id.volumeSeekBar;
      CircularSeekBar volumeSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (volumeSeekBar == null) {
        break missingId;
      }

      return new FragmentCirclePlayerBinding((ConstraintLayout) rootView, albumCover,
          albumCoverOverlay, guideline, binding_includePlayMenu, materialTextView3, nextButton,
          playPauseButton, playerToolbar, previousButton, progressSlider, songCurrentProgress,
          songInfo, songTotalTime, statusBarContainer, text, title, titleContainer, volumeSeekBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
