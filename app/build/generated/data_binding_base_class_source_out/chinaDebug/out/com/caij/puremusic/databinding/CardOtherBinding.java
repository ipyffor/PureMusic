// Generated by view binder compiler. Do not edit!
package com.caij.puremusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import code.name.monkey.appthemehelper.common.views.ATEAccentTextView;
import com.caij.puremusic.R;
import com.caij.puremusic.views.ListItemView;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CardOtherBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final ListItemView changelog;

  @NonNull
  public final ListItemView openSource;

  @NonNull
  public final ListItemView privacy;

  @NonNull
  public final ATEAccentTextView sb4;

  @NonNull
  public final ListItemView version;

  private CardOtherBinding(@NonNull MaterialCardView rootView, @NonNull ListItemView changelog,
      @NonNull ListItemView openSource, @NonNull ListItemView privacy,
      @NonNull ATEAccentTextView sb4, @NonNull ListItemView version) {
    this.rootView = rootView;
    this.changelog = changelog;
    this.openSource = openSource;
    this.privacy = privacy;
    this.sb4 = sb4;
    this.version = version;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static CardOtherBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CardOtherBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.card_other, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CardOtherBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.changelog;
      ListItemView changelog = ViewBindings.findChildViewById(rootView, id);
      if (changelog == null) {
        break missingId;
      }

      id = R.id.openSource;
      ListItemView openSource = ViewBindings.findChildViewById(rootView, id);
      if (openSource == null) {
        break missingId;
      }

      id = R.id.privacy;
      ListItemView privacy = ViewBindings.findChildViewById(rootView, id);
      if (privacy == null) {
        break missingId;
      }

      id = R.id.sb4;
      ATEAccentTextView sb4 = ViewBindings.findChildViewById(rootView, id);
      if (sb4 == null) {
        break missingId;
      }

      id = R.id.version;
      ListItemView version = ViewBindings.findChildViewById(rootView, id);
      if (version == null) {
        break missingId;
      }

      return new CardOtherBinding((MaterialCardView) rootView, changelog, openSource, privacy, sb4,
          version);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
