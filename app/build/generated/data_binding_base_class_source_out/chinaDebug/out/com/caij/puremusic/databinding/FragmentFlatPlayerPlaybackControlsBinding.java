// Generated by view binder compiler. Do not edit!
package com.caij.puremusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.caij.puremusic.R;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFlatPlayerPlaybackControlsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatImageButton playPauseButton;

  @NonNull
  public final RelativeLayout playerMediaControllerContainer;

  @NonNull
  public final AppCompatSeekBar progressSlider;

  @NonNull
  public final AppCompatImageButton repeatButton;

  @NonNull
  public final AppCompatImageButton shuffleButton;

  @NonNull
  public final MaterialTextView songCurrentProgress;

  @NonNull
  public final MaterialTextView songInfo;

  @NonNull
  public final MaterialTextView songTotalTime;

  @NonNull
  public final MaterialTextView text;

  @NonNull
  public final MaterialTextView title;

  @NonNull
  public final LinearLayout titleContainer;

  @NonNull
  public final FrameLayout volumeFragmentContainer;

  private FragmentFlatPlayerPlaybackControlsBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatImageButton playPauseButton,
      @NonNull RelativeLayout playerMediaControllerContainer,
      @NonNull AppCompatSeekBar progressSlider, @NonNull AppCompatImageButton repeatButton,
      @NonNull AppCompatImageButton shuffleButton, @NonNull MaterialTextView songCurrentProgress,
      @NonNull MaterialTextView songInfo, @NonNull MaterialTextView songTotalTime,
      @NonNull MaterialTextView text, @NonNull MaterialTextView title,
      @NonNull LinearLayout titleContainer, @NonNull FrameLayout volumeFragmentContainer) {
    this.rootView = rootView;
    this.playPauseButton = playPauseButton;
    this.playerMediaControllerContainer = playerMediaControllerContainer;
    this.progressSlider = progressSlider;
    this.repeatButton = repeatButton;
    this.shuffleButton = shuffleButton;
    this.songCurrentProgress = songCurrentProgress;
    this.songInfo = songInfo;
    this.songTotalTime = songTotalTime;
    this.text = text;
    this.title = title;
    this.titleContainer = titleContainer;
    this.volumeFragmentContainer = volumeFragmentContainer;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFlatPlayerPlaybackControlsBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFlatPlayerPlaybackControlsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_flat_player_playback_controls, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFlatPlayerPlaybackControlsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.playPauseButton;
      AppCompatImageButton playPauseButton = ViewBindings.findChildViewById(rootView, id);
      if (playPauseButton == null) {
        break missingId;
      }

      id = R.id.playerMediaControllerContainer;
      RelativeLayout playerMediaControllerContainer = ViewBindings.findChildViewById(rootView, id);
      if (playerMediaControllerContainer == null) {
        break missingId;
      }

      id = R.id.progressSlider;
      AppCompatSeekBar progressSlider = ViewBindings.findChildViewById(rootView, id);
      if (progressSlider == null) {
        break missingId;
      }

      id = R.id.repeatButton;
      AppCompatImageButton repeatButton = ViewBindings.findChildViewById(rootView, id);
      if (repeatButton == null) {
        break missingId;
      }

      id = R.id.shuffleButton;
      AppCompatImageButton shuffleButton = ViewBindings.findChildViewById(rootView, id);
      if (shuffleButton == null) {
        break missingId;
      }

      id = R.id.songCurrentProgress;
      MaterialTextView songCurrentProgress = ViewBindings.findChildViewById(rootView, id);
      if (songCurrentProgress == null) {
        break missingId;
      }

      id = R.id.songInfo;
      MaterialTextView songInfo = ViewBindings.findChildViewById(rootView, id);
      if (songInfo == null) {
        break missingId;
      }

      id = R.id.songTotalTime;
      MaterialTextView songTotalTime = ViewBindings.findChildViewById(rootView, id);
      if (songTotalTime == null) {
        break missingId;
      }

      id = R.id.text;
      MaterialTextView text = ViewBindings.findChildViewById(rootView, id);
      if (text == null) {
        break missingId;
      }

      id = R.id.title;
      MaterialTextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.titleContainer;
      LinearLayout titleContainer = ViewBindings.findChildViewById(rootView, id);
      if (titleContainer == null) {
        break missingId;
      }

      id = R.id.volumeFragmentContainer;
      FrameLayout volumeFragmentContainer = ViewBindings.findChildViewById(rootView, id);
      if (volumeFragmentContainer == null) {
        break missingId;
      }

      return new FragmentFlatPlayerPlaybackControlsBinding((ConstraintLayout) rootView,
          playPauseButton, playerMediaControllerContainer, progressSlider, repeatButton,
          shuffleButton, songCurrentProgress, songInfo, songTotalTime, text, title, titleContainer,
          volumeFragmentContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
