// Generated by view binder compiler. Do not edit!
package com.caij.puremusic.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.caij.puremusic.R;
import com.caij.puremusic.views.BaselineGridTextView;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAlbumDetailsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialCardView albumCoverContainer;

  @NonNull
  public final BaselineGridTextView albumDesc;

  @NonNull
  public final BaselineGridTextView albumText;

  @NonNull
  public final BaselineGridTextView albumTitle;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final AppCompatImageView image;

  @NonNull
  public final MaterialButton playAction;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final MaterialButton shuffleAction;

  @NonNull
  public final MaterialTextView songTitle;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final FrameLayout toolbarContainer;

  private FragmentAlbumDetailsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialCardView albumCoverContainer, @NonNull BaselineGridTextView albumDesc,
      @NonNull BaselineGridTextView albumText, @NonNull BaselineGridTextView albumTitle,
      @NonNull AppBarLayout appBarLayout, @NonNull AppCompatImageView image,
      @NonNull MaterialButton playAction, @NonNull RecyclerView recyclerView,
      @NonNull MaterialButton shuffleAction, @NonNull MaterialTextView songTitle,
      @NonNull MaterialToolbar toolbar, @NonNull FrameLayout toolbarContainer) {
    this.rootView = rootView;
    this.albumCoverContainer = albumCoverContainer;
    this.albumDesc = albumDesc;
    this.albumText = albumText;
    this.albumTitle = albumTitle;
    this.appBarLayout = appBarLayout;
    this.image = image;
    this.playAction = playAction;
    this.recyclerView = recyclerView;
    this.shuffleAction = shuffleAction;
    this.songTitle = songTitle;
    this.toolbar = toolbar;
    this.toolbarContainer = toolbarContainer;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAlbumDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAlbumDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_album_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAlbumDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.albumCoverContainer;
      MaterialCardView albumCoverContainer = ViewBindings.findChildViewById(rootView, id);
      if (albumCoverContainer == null) {
        break missingId;
      }

      id = R.id.albumDesc;
      BaselineGridTextView albumDesc = ViewBindings.findChildViewById(rootView, id);
      if (albumDesc == null) {
        break missingId;
      }

      id = R.id.albumText;
      BaselineGridTextView albumText = ViewBindings.findChildViewById(rootView, id);
      if (albumText == null) {
        break missingId;
      }

      id = R.id.albumTitle;
      BaselineGridTextView albumTitle = ViewBindings.findChildViewById(rootView, id);
      if (albumTitle == null) {
        break missingId;
      }

      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.image;
      AppCompatImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.playAction;
      MaterialButton playAction = ViewBindings.findChildViewById(rootView, id);
      if (playAction == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.shuffleAction;
      MaterialButton shuffleAction = ViewBindings.findChildViewById(rootView, id);
      if (shuffleAction == null) {
        break missingId;
      }

      id = R.id.songTitle;
      MaterialTextView songTitle = ViewBindings.findChildViewById(rootView, id);
      if (songTitle == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.toolbar_container;
      FrameLayout toolbarContainer = ViewBindings.findChildViewById(rootView, id);
      if (toolbarContainer == null) {
        break missingId;
      }

      return new FragmentAlbumDetailsBinding((CoordinatorLayout) rootView, albumCoverContainer,
          albumDesc, albumText, albumTitle, appBarLayout, image, playAction, recyclerView,
          shuffleAction, songTitle, toolbar, toolbarContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
